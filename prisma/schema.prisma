// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @default(cuid())
  first_name      String
  last_name       String
  email           String    @unique
  phone_number    String?
  document_type   String? // DNI, CE, RUC, Pasaporte - nullable para admin
  document_number String    @unique // Para identificación de clientes
  user_type       String    @default("client") // admin/client
  saldo_total     Decimal   @default(0) @db.Decimal(10, 2)
  saldo_retenido  Decimal   @default(0) @db.Decimal(10, 2)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  // Relaciones
  guarantees    Guarantee[]
  movements     Movement[]
  refunds       Refund[]
  billings      Billing[]
  notifications Notification[]

  @@map("users")
}

model Asset {
  id                  String   @id @default(cuid())
  placa               String   @unique
  empresa_propietaria String
  marca               String?
  modelo              String?
  año                Int?
  estado              String   @default("disponible") // disponible, vendido, retirado
  descripcion         String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Relaciones
  auctions Auction[]

  @@map("assets")
}

model Auction {
  id                      String        @id @default(cuid())
  asset_id                String
  fecha_resultado_general DateTime?
  estado                  AuctionEstado @default(activa)
  id_offerWin             String? // ID de la oferta ganadora
  finished_at             DateTime?
  created_at              DateTime      @default(now())
  updated_at              DateTime      @updatedAt

  // Relaciones
  asset         Asset       @relation(fields: [asset_id], references: [id], onDelete: Cascade)
  guarantees    Guarantee[]
  billings      Billing[]
  refunds       Refund[]
  movements_ref Movement[]  @relation("MovementAuctionRef")

  @@map("auctions")
}

model Guarantee {
  id                String    @id @default(cuid())
  auction_id        String
  user_id           String
  monto_oferta      Decimal   @db.Decimal(10, 2)
  posicion_ranking  Int? // 1=ganador, 2=segundo, etc.
  estado            String    @default("activa") // activa, ganadora, perdedora
  fecha_limite_pago DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relaciones
  auction       Auction    @relation(fields: [auction_id], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  movements_ref Movement[] @relation("MovementGuaranteeRef")

  @@map("guarantees")
}

model Movement {
  id                         String          @id @default(cuid())
  user_id                    String
  tipo_movimiento_general    MovementGeneral
  tipo_movimiento_especifico String
  monto                      Decimal         @db.Decimal(10, 2)
  moneda                     String          @default("USD")
  tipo_pago                  TipoPago?
  numero_cuenta_origen       String?
  voucher_url                String?
  concepto                   String
  estado                     MovementEstado
  fecha_pago                 DateTime?
  fecha_resolucion           DateTime?
  motivo_rechazo             String?
  numero_operacion           String?
  auction_id_ref             String?
  guarantee_id_ref           String?
  refund_id_ref              String?
  created_at                 DateTime        @default(now())
  updated_at                 DateTime        @updatedAt

  // Relaciones
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  auction_ref   Auction?   @relation(name: "MovementAuctionRef", fields: [auction_id_ref], references: [id], onDelete: Cascade)
  guarantee_ref Guarantee? @relation(name: "MovementGuaranteeRef", fields: [guarantee_id_ref], references: [id], onDelete: Cascade)
  refund_ref    Refund?    @relation(name: "MovementRefundRef", fields: [refund_id_ref], references: [id], onDelete: Cascade)

  @@map("movements")
}

model Refund {
  id                      String    @id @default(cuid())
  user_id                 String
  auction_id              String?
  monto_solicitado        Decimal   @db.Decimal(10, 2)
  tipo_reembolso          String // mantener_saldo, devolver_dinero
  estado                  String    @default("solicitado") // solicitado, confirmado, rechazado, procesado, cancelado
  fecha_solicitud         DateTime  @default(now())
  fecha_respuesta_empresa DateTime?
  fecha_procesamiento     DateTime?
  motivo                  String?
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt

  // Relaciones
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  auction       Auction?   @relation(fields: [auction_id], references: [id], onDelete: Cascade)
  movements_ref Movement[] @relation("MovementRefundRef")

  @@map("refunds")
}

model Billing {
  id                      String              @id @default(cuid())
  user_id                 String
  billing_document_type   BillingDocumentType
  billing_document_number String
  billing_name            String
  monto                   Decimal             @db.Decimal(10, 2)
  moneda                  String              @default("USD")
  concepto                String // Ej: "Compra vehículo ... - Subasta #15"
  auction_id              String
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt

  // Relaciones
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auction_id], references: [id], onDelete: Cascade)

  @@map("billings")
}

model Notification {
  id             String             @id @default(cuid())
  user_id        String
  tipo           NotificationTipo
  titulo         String
  mensaje        String
  estado         NotificationEstado @default(pendiente)
  email_status   EmailStatus        @default(pendiente)
  reference_type String?
  reference_id   String?
  fecha_creacion DateTime           @default(now())
  fecha_vista    DateTime?
  email_sent_at  DateTime?
  email_error    String?
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt

  // Relaciones
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum MovementGeneral {
  entrada
  salida
}

enum MovementEstado {
  pendiente
  validado
  rechazado
}

enum TipoPago {
  deposito
  transferencia
  ajuste_manual
}

enum AuctionEstado {
  activa
  pendiente
  en_validacion
  finalizada
  vencida
  cancelada
  ganada
  facturada
  perdida
  penalizada
}

enum BillingDocumentType {
  RUC
  DNI
}

enum NotificationTipo {
  ganador_subasta
  pago_registrado
  pago_validado
  pago_rechazado
  competencia_ganada
  competencia_perdida
  penalidad_aplicada
  facturacion_completada
  billing_generado
  reembolso_procesado
  reembolso_solicitado
}

enum NotificationEstado {
  pendiente
  vista
}

enum EmailStatus {
  pendiente
  enviado
  fallido
}
